document.addEventListener('alpine:init', () => {
    Alpine.data('shop', () => ({
        init() {
            // T·ª± ƒë·ªông ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m m·ªói khi gi·ªè h√†ng thay ƒë·ªïi
            this.$watch('cart', () => {
                this.selectedCartItems = this.cart.map(item => item.id);
            });

            // Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu (quan tr·ªçng khi t·∫£i l·∫°i trang v·ªõi gi·ªè h√†ng ƒë√£ c√≥)
            this.selectedCartItems = this.cart.map(item => item.id);
        },


        // --- C·∫§U H√åNH PH√ç SHIP (Thay ƒë·ªïi ·ªü ƒë√¢y) ---
        SHIPPING_FEE: 21000, // Ph√≠ v·∫≠n chuy·ªÉn m·∫∑c ƒë·ªãnh 21,000ƒë

        // --- STATE ---
        view: 'products', // 'categories', 'products', or 'cart'
        categories: [],
        products: [],
        shopInfo: { stats: {} }, // Add shopInfo with a default stats object
        cart: Alpine.$persist([]).as('shoppingCart'),
        selectedCartItems: Alpine.$persist([]).as('selectedCartItems'), // L∆∞u ID s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
        miniCartError: '', // Th√¥ng b√°o l·ªói trong mini cart

        // S·∫£n ph·∫©m b√°n k√®m
        addonProducts: [
            {
                id: 'addon_tui_dau_tam',
                name: 'T√∫i D√¢u T·∫±m',
                description: 'Kh√∫c d√¢u t·∫±m c·∫Øt nh·ªè trong t√∫i nhung',
                price: 39000,
                original_price: 45000,
                image: './assets/images/demo.jpg',
                detailedInfo: {
                    fullDescription: 'T√∫i d√¢u t·∫±m cao c·∫•p ƒë∆∞·ª£c l√†m t·ª´ kh√∫c c√†nh d√¢u t·∫±m t·ª± nhi√™n, c·∫Øt nh·ªè v√† ƒë√≥ng g√≥i trong t√∫i nhung sang tr·ªçng. S·∫£n ph·∫©m gi√∫p b√© ng·ªß ngon, gi·∫£m stress v√† tƒÉng c∆∞·ªùng s·ª©c kh·ªèe t·ª± nhi√™n.',
                    benefits: [
                        'üåø Gi√∫p b√© ng·ªß ngon v√† s√¢u gi·∫•c',
                        'üòå Gi·∫£m cƒÉng th·∫≥ng, lo √¢u cho b√©',
                        'üõ°Ô∏è TƒÉng c∆∞·ªùng h·ªá mi·ªÖn d·ªãch t·ª± nhi√™n',
                        'üå± 100% t·ª´ thi√™n nhi√™n, an to√†n cho b√©',
                        'üíù ƒê√≥ng g√≥i trong t√∫i nhung cao c·∫•p'
                    ],
                    usage: 'ƒê·∫∑t t√∫i d√¢u t·∫±m g·∫ßn g·ªëi ho·∫∑c trong c≈©i c·ªßa b√©. C√≥ th·ªÉ b√≥p nh·∫π ƒë·ªÉ t·ªèa h∆∞∆°ng th∆°m t·ª± nhi√™n. Thay th·∫ø sau 3-6 th√°ng s·ª≠ d·ª•ng.',
                    materials: 'C√†nh d√¢u t·∫±m t·ª± nhi√™n, t√∫i nhung cotton cao c·∫•p',
                    origin: 'Th√¥n ƒê√¥ng Cao, Tr√°ng Vi·ªát, H√† N·ªôi'
                }
            },
            {
                id: 'addon_moc_chia_khoa',
                name: 'M√≥c Ch√¨a Kh√≥a D√¢u T·∫±m',
                description: 'M√≥c ch√¨a kh√≥a t·ª´ kh√∫c d√¢u t·∫±m t·ª± nhi√™n',
                price: 29000,
                original_price: 35000,
                image: './assets/images/demo.jpg',
                detailedInfo: {
                    fullDescription: 'M√≥c ch√¨a kh√≥a ƒë·ªôc ƒë√°o ƒë∆∞·ª£c ch·∫ø t√°c t·ª´ kh√∫c d√¢u t·∫±m t·ª± nhi√™n, mang l·∫°i may m·∫Øn v√† b√¨nh an. Thi·∫øt k·∫ø nh·ªè g·ªçn, ti·ªán l·ª£i, ph√π h·ª£p l√†m qu√† t·∫∑ng ho·∫∑c v·∫≠t ph·∫©m phong th·ªßy.',
                    benefits: [
                        'üçÄ Mang l·∫°i may m·∫Øn v√† b√¨nh an',
                        'üé® Thi·∫øt k·∫ø ƒë·ªôc ƒë√°o, kh√¥ng tr√πng l·∫∑p',
                        'üåø Ch·∫•t li·ªáu t·ª± nhi√™n, th√¢n thi·ªán m√¥i tr∆∞·ªùng',
                        'üíº Nh·ªè g·ªçn, ti·ªán l·ª£i mang theo',
                        'üéÅ √ù nghƒ©a l√†m qu√† t·∫∑ng ƒë·∫∑c bi·ªát'
                    ],
                    usage: 'G·∫Øn v√†o ch√πm ch√¨a kh√≥a, t√∫i x√°ch ho·∫∑c balo. C√≥ th·ªÉ s·ª≠ d·ª•ng l√†m v·∫≠t ph·∫©m trang tr√≠ ho·∫∑c qu√† l∆∞u ni·ªám.',
                    materials: 'Kh√∫c d√¢u t·∫±m t·ª± nhi√™n, d√¢y m√≥c inox kh√¥ng g·ªâ',
                    origin: 'Th√¥n ƒê√¥ng Cao, Tr√°ng Vi·ªát, H√† N·ªôi'
                }
            }
        ],
        currentCategory: { id: 'all', name: 'Top b√°n ch·∫°y', description: 'Nh·ªØng s·∫£n ph·∫©m ƒë∆∞·ª£c y√™u th√≠ch v√† mua nhi·ªÅu nh·∫•t.' },
        activeFilter: 'best_selling', // 'best_selling', 'newest', 'top_rated'
        visibleProductCount: 10, // S·ªë s·∫£n ph·∫©m hi·ªÉn th·ªã ban ƒë·∫ßu
        productsPerLoad: 10, // S·ªë s·∫£n ph·∫©m t·∫£i th√™m m·ªói l·∫ßn
        loading: true,
        error: null,
        isSubmitting: false,
        searchQuery: '', // T·ª´ kh√≥a ƒëang g√µ
        activeSearchQuery: '', // T·ª´ kh√≥a ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng ƒë·ªÉ l·ªçc

        // --- MODAL STATES ---
        isImageModalOpen: false,
        currentImage: '',
        isAlertModalOpen: false,
        alertModalMessage: '',
        alertModalType: 'success', // 'success' or 'error'
        isConfirmModalOpen: false,
        isSuccessModalOpen: false,
        isMiniCartOpen: false,
        miniCartTimeout: null,
        lastOrderId: '', // L∆∞u m√£ ƒë∆°n h√†ng cu·ªëi c√πng ƒë·ªÉ hi·ªÉn th·ªã
        isBankTransferModalOpen: false,
        isDiscountModalOpen: false, // Modal m√£ gi·∫£m gi√°
        isCartAnimating: false, // Tr·∫°ng th√°i cho hi·ªáu ·ª©ng gi·ªè h√†ng
        isShowingBestSellers: false, // C·ªù tr·∫°ng th√°i cho ch·ª©c nƒÉng xem s·∫£n ph·∫©m b√°n ch·∫°y
        preventMiniCartCloseOnClickOutside: false, // NgƒÉn mini cart ƒë√≥ng khi modal kh√°c m·ªü

        // --- QUICK VIEW MODAL ---
        isQuickViewOpen: false,
        quickViewProduct: null,
        sharedDetails: {},

        // --- COUNTDOWN TIMER ---
        freeshipOfferEndTime: Alpine.$persist(0).as('freeshipOfferEndTime'),
        countdownTimer: {
            interval: null,
            display: '02 : 00 : 00'
        },

        // Addon detail modal states
        isAddonDetailModalOpen: false,
        currentAddonDetail: null,
        addonDetailOpenedFrom: null, // Ghi nh·ªõ n∆°i m·ªü modal chi ti·∫øt

        // --- SOCIAL PROOF NOTIFICATION ---
        notification: {
            visible: false,
            message: ''
        },

        // Discount properties
        availableDiscounts: [], // Danh s√°ch m√£ gi·∫£m gi√° s·∫Ω ƒë∆∞·ª£c t·∫£i t·ª´ file JSON
        discountCode: Alpine.$persist('').as('discountCode'),
        appliedDiscountCode: Alpine.$persist('').as('appliedDiscountCode'),
        appliedGift: Alpine.$persist(null).as('appliedGift'),
        discountAmount: 0,
        discountError: '',

        // --- CUSTOMER INFO & ADDRESS ---
        productNotes: Alpine.$persist({}).as('productNotes'), // L∆∞u ghi ch√∫ cho t·ª´ng s·∫£n ph·∫©m
        customer: Alpine.$persist({ name: '', phone: '', address: '', notes: '' }).as('customerInfo'),
        paymentMethod: 'cod', // 'cod' or 'bank_transfer'
        addressData: [],
        selectedProvince: Alpine.$persist('').as('selectedProvince'),
        selectedDistrict: Alpine.$persist('').as('selectedDistrict'),
        selectedWard: Alpine.$persist('').as('selectedWard'),
        streetAddress: Alpine.$persist('').as('streetAddress'),

        // --- LIFECYCLE ---
        init() {
            this.loadData();
            this.startNotificationLoop();
            this.startFreeshipCountdown();

            this.$watch('selectedProvince', () => {
                this.selectedDistrict = '';
                this.selectedWard = '';
            });

            this.$watch('selectedDistrict', () => {
                this.selectedWard = '';
            });

            this.$watch('selectedWard', () => this.updateFullAddress());
            this.$watch('streetAddress', () => this.updateFullAddress());




            // Theo d√µi s·ª± thay ƒë·ªïi ghi ch√∫ trong gi·ªè h√†ng v√† l∆∞u l·∫°i
            this.$watch('cart', (newCart) => {
                newCart.forEach(item => {
                    if (item.weight) { // Ch·ªâ l∆∞u n·∫øu c√≥ ghi ch√∫
                        this.productNotes[item.id] = item.weight;
                    }
                });
            }, { deep: true });

            // X√°c th·ª±c d·ªØ li·ªáu gi·ªè h√†ng t·ª´ localStorage ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu c≈©
            if (this.cart.length > 0) {
                const uniqueIds = new Set(this.cart.map(item => item.id));
                if (uniqueIds.size < this.cart.length) {
                    console.warn('Ph√°t hi·ªán d·ªØ li·ªáu gi·ªè h√†ng kh√¥ng h·ª£p l·ªá (phi√™n b·∫£n c≈©). ƒêang t·ª± ƒë·ªông x√≥a...');
                    this.cart = []; // X√≥a gi·ªè h√†ng, $persist s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t localStorage
                }
            }
        },

        // --- HELPERS ---
        generateOrderId() {
            const date = new Date();
            const year = date.getFullYear().toString().slice(-2);
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            const randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let randomPart = '';
            for (let i = 0; i < 3; i++) {
                randomPart += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
            }
            return `AN${year}${month}${day}${randomPart}`;
        },

        formatCurrency(value) {
            if (typeof value !== 'number') return value;
            return value.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
        },

        // Hi·ªÉn th·ªã modal th√¥ng b√°o t√πy ch·ªânh
        showAlert(message, type = 'success') {
            this.alertModalMessage = message;
            this.alertModalType = type;
            this.isAlertModalOpen = true;
            setTimeout(() => {
                this.isAlertModalOpen = false;
            }, 3000); // TƒÉng th·ªùi gian hi·ªÉn th·ªã m·ªôt ch√∫t
        },

        // --- DATA FETCHING ---
        async loadData() {
            this.loading = true;
            this.error = null;
            try {
                const [catRes, prodRes, infoRes, addressRes, discountRes, sharedDetailsRes] = await Promise.all([
                    fetch('./data/categories.json'),
                    fetch('./data/products.json'),
                    fetch('./data/shop-info.json'),
                    fetch('./data/vietnamAddress.json'),
                    fetch('./data/discounts.json'),
                    fetch('./data/shared-details.json') // T·∫£i th√¥ng tin m√¥ t·∫£ chung
                ]);
                if (!catRes.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i danh m·ª•c.');
                if (!prodRes.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m.');
                if (!infoRes.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin shop.');
                if (!addressRes.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë·ªãa ch·ªâ.');
                if (!discountRes.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i m√£ gi·∫£m gi√°.');
                if (!sharedDetailsRes.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt.');

                const categoryData = await catRes.json();
                this.categories = [{ id: 'all', name: 'T·∫•t c·∫£' }, ...categoryData];
                this.products = await prodRes.json();
                this.shopInfo = await infoRes.json();
                this.addressData = await addressRes.json();
                this.availableDiscounts = await discountRes.json(); // T·∫£i m√£ gi·∫£m gi√° v√†o bi·∫øn ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi modal
                this.sharedDetails = await sharedDetailsRes.json(); // L∆∞u th√¥ng tin m√¥ t·∫£ chung

                // --- T√çNH TO√ÅN CH·ªà S·ªê TH·ªêNG K√ä ƒê·ªòNG ---
                if (this.products.length > 0) {
                    const totalSales = this.products.reduce((sum, product) => sum + (product.purchases || 0), 0);
                    const totalRatingSum = this.products.reduce((sum, product) => sum + (product.rating || 0), 0);
                    const productsWithRating = this.products.filter(p => p.rating > 0).length;
                    const averageRating = productsWithRating > 0 ? (totalRatingSum / productsWithRating).toFixed(1) : 0;

                    // G·ªôp c√°c ch·ªâ s·ªë m·ªõi v√†o shopInfo.stats
                    this.shopInfo.stats = {
                        ...this.shopInfo.stats,
                        products: this.products.length, // Ghi ƒë√® s·ªë s·∫£n ph·∫©m b·∫±ng s·ªë l∆∞·ª£ng th·ª±c t·∫ø
                        totalSales: totalSales,
                        averageRating: averageRating
                    };
                }

            } catch (error) {
                console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
                this.error = error.message;
            } finally {
                this.loading = false;
            }
        },

        // --- COMPUTED ---
        _fullProductList() {
            if (!this.currentCategory) return [];

            let filteredByCategory = this.currentCategory.id === 'all'
                ? this.products
                : this.products.filter(p => p.category === this.currentCategory.id);

            // L·ªçc s·∫£n ph·∫©m theo t·ª´ kh√≥a t√¨m ki·∫øm ƒë√£ √°p d·ª•ng
            let searchedProducts = filteredByCategory;
            if (this.activeSearchQuery !== '') {
                const lowerCaseQuery = this.activeSearchQuery.toLowerCase();
                searchedProducts = filteredByCategory.filter(p =>
                    p.name.toLowerCase().includes(lowerCaseQuery)
                );
            }

            // T·∫°o m·ªôt b·∫£n sao ƒë·ªÉ s·∫Øp x·∫øp m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn m·∫£ng g·ªëc
            let sortedProducts = [...searchedProducts];

            // √Åp d·ª•ng logic s·∫Øp x·∫øp d·ª±a tr√™n b·ªô l·ªçc ƒëang ho·∫°t ƒë·ªông
            switch (this.activeFilter) {
                case 'best_selling':
                    sortedProducts.sort((a, b) => b.purchases - a.purchases);
                    break;
                case 'newest':
                    // Gi·∫£ ƒë·ªãnh s·∫£n ph·∫©m m·ªõi nh·∫•t ƒë∆∞·ª£c th√™m v√†o cu·ªëi file JSON, n√™n ch√∫ng ta ƒë·∫£o ng∆∞·ª£c l·∫°i
                    sortedProducts.reverse();
                    break;
                case 'top_rated':
                    sortedProducts.sort((a, b) => b.rating - a.rating);
                    break;
            }

            return sortedProducts;
        },

        filteredProducts() {
            const fullList = this._fullProductList();
            // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô xem 10 s·∫£n ph·∫©m b√°n ch·∫°y, ch·ªâ hi·ªÉn th·ªã 10 s·∫£n ph·∫©m
            if (this.isShowingBestSellers) {
                return fullList.slice(0, 10);
            }
            return fullList.slice(0, this.visibleProductCount);
        },

        canLoadMore() {
            return this.visibleProductCount < this._fullProductList().length;
        },

        // ƒê·∫øm s·ªë s·∫£n ph·∫©m trong m·ªôt danh m·ª•c
        getProductCount(categoryId) {
            return this.products.filter(p => p.category === categoryId).length;
        },

        getCategoryPurchases(categoryId) {
            const productsToSum = categoryId === 'all'
                ? this.products
                : this.products.filter(p => p.category === categoryId);

            const totalPurchases = productsToSum.reduce((total, product) => total + (product.purchases || 0), 0);

            if (totalPurchases > 1000) {
                // L√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n v√† thay d·∫•u . b·∫±ng ,
                const thousands = (totalPurchases / 1000).toFixed(1);
                return thousands.includes('.0') ? `${Math.round(totalPurchases / 1000)}k` : thousands.replace('.', ',') + 'k';
            }
            return totalPurchases;
        },
        cartSubtotal() {
            // Lu√¥n t√≠nh theo s·∫£n ph·∫©m ƒë√£ ch·ªçn v√† b·ªè qua c√°c s·∫£n ph·∫©m qu√† t·∫∑ng
            return this.selectedCartProducts
                .filter(item => !item.isGift)
                .reduce((total, item) => total + (item.price * item.quantity), 0);
        },


        // --- LOGIC KHUY·∫æN M√ÉI ---
        get addonDiscount() {
            // Gi·∫£m 5,000ƒë n·∫øu ch·ªçn mua M√≥c Ch√¨a Kh√≥a
            const hasKeychain = this.selectedCartItems.includes('addon_moc_chia_khoa');
            return hasKeychain ? 5000 : 0;
        },

        get tuiDauTamBonusDiscount() {
            const hasTuiDauTam = this.selectedCartItems.includes('addon_tui_dau_tam');
            const isFreeshipAppliedByCode = this.isFreeshippingFromDiscount();

            // Gi·∫£m 8k n·∫øu kh√°ch mua t√∫i d√¢u t·∫±m TRONG KHI ƒë√£ ƒë∆∞·ª£c freeship b·∫±ng M√É GI·∫¢M GI√Å
            if (hasTuiDauTam && isFreeshipAppliedByCode) {
                return 8000;
            }
            return 0;
        },

        // --- K·∫æT TH√öC LOGIC KHUY·∫æN M√ÉI ---

        get freeShipping() {
            // Freeship n·∫øu mua "T√∫i D√¢u T·∫±m"
            const hasTuiDauTam = this.selectedCartItems.includes('addon_tui_dau_tam');
            if (hasTuiDauTam) return true;

            // Freeship n·∫øu c√≥ m√£ gi·∫£m gi√° v·∫≠n chuy·ªÉn
            const discount = this.availableDiscounts.find(d => d.code === this.appliedDiscountCode);
            if (discount && discount.type === 'shipping') return true;

            return false;
        },

        // Lu√¥n tr·∫£ v·ªÅ ph√≠ ship g·ªëc ƒë·ªÉ hi·ªÉn th·ªã
        shippingFee() {
            return this.SHIPPING_FEE;
        },

        // T√≠nh to√°n ti·ªÅn gi·∫£m gi√° ship
        get shippingDiscount() {
            return this.freeShipping ? this.SHIPPING_FEE : 0;
        },

        cartTotal() {
            const subtotal = this.cartSubtotal();
            const total = subtotal + this.shippingFee() - this.discountAmount - this.addonDiscount - this.shippingDiscount - this.tuiDauTamBonusDiscount;
            return total > 0 ? total : 0;
        },

        get totalCartQuantity() {
            // T√≠nh t·ªïng s·ªë l∆∞·ª£ng c·ªßa t·∫•t c·∫£ c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
            return this.selectedCartProducts.reduce((total, item) => total + item.quantity, 0);
        },

        // --- ADDRESS COMPUTED PROPERTIES ---
        get provinces() {
            return this.addressData.map(p => ({ Id: p.Id, Name: p.Name }));
        },

        get districts() {
            if (!this.selectedProvince) return [];
            const province = this.addressData.find(p => p.Id === this.selectedProvince);
            return province ? province.Districts.map(d => ({ Id: d.Id, Name: d.Name })) : [];
        },

        // L·∫•y s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
        get bestSellingProducts() {
            return [...this.products]
                .sort((a, b) => (b.purchases || 0) - (a.purchases || 0))
                .slice(0, 10);
        },

        get wards() {
            if (!this.selectedProvince || !this.selectedDistrict) return [];
            const province = this.addressData.find(p => p.Id === this.selectedProvince);
            if (!province) return [];
            const district = province.Districts.find(d => d.Id === this.selectedDistrict);
            return district ? district.Wards.map(w => ({ Id: w.Id, Name: w.Name })) : [];
        },

        // --- ADDRESS HELPER ---
        updateFullAddress() {
            if (this.selectedProvince && this.selectedDistrict && this.selectedWard) {
                const provinceName = this.provinces.find(p => p.Id === this.selectedProvince)?.Name || '';
                const districtName = this.districts.find(d => d.Id === this.selectedDistrict)?.Name || '';
                const wardName = this.wards.find(w => w.Id === this.selectedWard)?.Name || '';

                // Combine them, ensuring no empty parts create extra commas
                const fullAddress = [this.streetAddress, wardName, districtName, provinceName].filter(Boolean).join(', ');
                this.customer.address = fullAddress;
            } else {
                this.customer.address = ''; // Clear if not fully selected
            }
        },

        // --- VIEW LOGIC ---
        performSearch() {
            this.activeSearchQuery = this.searchQuery.trim();
            this.visibleProductCount = 10; // Reset l·∫°i danh s√°ch s·∫£n ph·∫©m

            // Ch·ªâ cu·ªôn khi c√≥ t·ª´ kh√≥a ƒë∆∞·ª£c t√¨m
            if (this.activeSearchQuery) {
                this.$nextTick(() => {
                    const element = document.getElementById('product-list-anchor');
                    if (element) {
                        element.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                });
            }
        },

        loadMoreProducts() {
            this.visibleProductCount += this.productsPerLoad;
        },

        selectCategory(category) {
            this.visibleProductCount = 10; // Reset l·∫°i khi ch·ªçn danh m·ª•c m·ªõi
            this.currentCategory = category;
            this.searchQuery = ''; // X√≥a t·ª´ kh√≥a ƒëang g√µ
            this.activeSearchQuery = ''; // X√≥a t·ª´ kh√≥a ƒë√£ t√¨m
            this.view = 'products';

            // Cu·ªôn xu·ªëng ph·∫ßn s·∫£n ph·∫©m
            this.$nextTick(() => {
                const element = document.getElementById('product-list-anchor');
                if (element) {
                    element.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            });
        },
        triggerCartAnimation() {
            this.isCartAnimating = true;
            // Reset the animation class after it finishes
            setTimeout(() => {
                this.isCartAnimating = false;
            }, 600); // Must match the animation duration in CSS
        },



        backToCategories() {
            this.selectCategory({ id: 'all', name: 'Top b√°n ch·∫°y', description: 'Nh·ªØng s·∫£n ph·∫©m ƒë∆∞·ª£c y√™u th√≠ch v√† mua nhi·ªÅu nh·∫•t.' });
            this.view = 'products'; // Lu√¥n ·ªü view products
        },

        // --- UI ACTIONS ---
        showBestSellers() {
            this.isMiniCartOpen = false;
            this.currentCategory = { id: 'all', name: 'Top b√°n ch·∫°y' }; // Reset v·ªÅ category g·ªëc
            this.activeFilter = 'best_selling'; // K√≠ch ho·∫°t b·ªô l·ªçc b√°n ch·∫°y ƒë√£ c√≥
            this.isShowingBestSellers = true; // B·∫≠t c·ªù tr·∫°ng th√°i ƒë·∫∑c bi·ªát

            // Cu·ªôn ƒë·∫øn ph·∫ßn s·∫£n ph·∫©m m·ªôt c√°ch m∆∞·ª£t m√†
            this.$nextTick(() => {
                const productsSection = document.getElementById('product-list-anchor');
                if (productsSection) {
                    productsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            });
        },

        // --- IMAGE MODAL LOGIC ---


        openImageModal(imageUrl) {
            console.log('openImageModal function called.');
            this.currentImage = imageUrl;
            this.isImageModalOpen = true;
            console.log('isImageModalOpen set to:', this.isImageModalOpen);
            document.body.style.overflow = 'hidden';
            console.log('Body overflow set to hidden.');
        },

        closeImageModal() {
            this.isImageModalOpen = false;
            setTimeout(() => { this.currentImage = ''; }, 300);
            document.body.style.overflow = 'auto';
        },

        // --- ADDON DETAIL MODAL LOGIC ---
        openAddonDetail(addon) {
            // N·∫øu m·ªü t·ª´ mini cart, b·∫≠t c·ªù ngƒÉn kh√¥ng cho mini cart b·ªã ƒë√≥ng
            if (this.isMiniCartOpen) {
                this.preventMiniCartCloseOnClickOutside = true;
            }
            this.currentAddonDetail = addon;
            this.isAddonDetailModalOpen = true;

            // C·∫≠p nh·∫≠t t√™n s·∫£n ph·∫©m trong banner freeship ƒë·ªÉ hi·ªÉn th·ªã s·∫£n ph·∫©m ƒëang xem
            this.$nextTick(() => {
                const addonNameElement = document.getElementById('addon-product-name');
                if (addonNameElement && addon) {
                    addonNameElement.textContent = addon.name;
                }
            });

            document.body.style.overflow = 'hidden';
        },

        closeAddonDetail() {
            this.isAddonDetailModalOpen = false;

            // T·∫Øt c·ªù ngƒÉn ƒë√≥ng mini cart sau m·ªôt kho·∫£ng tr·ªÖ ng·∫Øn
            setTimeout(() => {
                this.preventMiniCartCloseOnClickOutside = false;
            }, 100);

            // Ch·ªâ kh√¥i ph·ª•c scroll n·∫øu kh√¥ng c√≤n modal n√†o kh√°c ƒëang m·ªü
            if (!this.isMiniCartOpen) {
                document.body.style.overflow = 'auto';
            }

            // X√≥a d·ªØ li·ªáu addon sau khi hi·ªáu ·ª©ng ƒë√≥ng ho√†n t·∫•t
            setTimeout(() => {
                this.currentAddonDetail = null;
            }, 300);
        },

        // --- CART LOGIC ---
        addToCart(product) {
            const existingItem = this.cart.find(item => item.id === product.id);
            if (existingItem) {
                existingItem.quantity++;
            } else {
                const savedNote = this.productNotes[product.id] || '';
                this.cart.push({ ...product, quantity: 1, weight: savedNote });
                // T·ª± ƒë·ªông ch·ªçn s·∫£n ph·∫©m m·ªõi th√™m
                this.selectedCartItems.push(product.id);
            }

            // K√≠ch ho·∫°t hi·ªáu ·ª©ng gi·ªè h√†ng v√† hi·ªÉn th·ªã th√¥ng b√°o
            this.triggerCartAnimation();
            this.showAlert('ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!', 'success');
        },

        // M·ªü/ƒë√≥ng mini cart
        toggleMiniCart() {
            this.isMiniCartOpen = !this.isMiniCartOpen;
            // X√≥a l·ªói khi m·ªü mini cart
            if (this.isMiniCartOpen) {
                this.miniCartError = '';
            }
        },

        // Toggle ch·ªçn s·∫£n ph·∫©m trong mini cart
        toggleCartItemSelection(productId) {
            const index = this.selectedCartItems.indexOf(productId);
            if (index > -1) {
                this.selectedCartItems.splice(index, 1);
            } else {
                this.selectedCartItems.push(productId);
            }
        },

        // Toggle ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m
        toggleSelectAll() {
            if (this.isAllSelected) {
                this.selectedCartItems = [];
            } else {
                this.selectedCartItems = this.cart.map(item => item.id);
            }
        },

        // Ki·ªÉm tra c√≥ ch·ªçn t·∫•t c·∫£ kh√¥ng
        get isAllSelected() {
            return this.cart.length > 0 && this.selectedCartItems.length === this.cart.length;
        },

        // Chuy·ªÉn ƒë·∫øn trang thanh to√°n v·ªõi s·∫£n ph·∫©m ƒë√£ ch·ªçn
        checkoutSelected() {
            if (this.selectedCartItems.length === 0) {
                this.miniCartError = 'Vui l√≤ng ch·ªçn 1 s·∫£n ph·∫©m ƒë·ªÉ mua h√†ng';
                return;
            }
            this.miniCartError = '';
            this.view = 'cart';
            this.isMiniCartOpen = false;
        },

        // L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ ch·ªçn ƒë·ªÉ thanh to√°n
        get selectedCartProducts() {
            return this.cart.filter(item => this.selectedCartItems.includes(item.id));
        },

        // Th√™m s·∫£n ph·∫©m b√°n k√®m v√†o gi·ªè h√†ng
        addAddonToCart(addonProduct) {
            const existingItem = this.cart.find(item => item.id === addonProduct.id);
            if (existingItem) {
                existingItem.quantity++;
            } else {
                this.cart.push({ ...addonProduct, quantity: 1, weight: '' });
                // T·ª± ƒë·ªông ch·ªçn s·∫£n ph·∫©m b√°n k√®m
                this.selectedCartItems.push(addonProduct.id);
            }

                        // K√≠ch ho·∫°t hi·ªáu ·ª©ng gi·ªè h√†ng
            this.triggerCartAnimation();
            this.showAlert(`ƒê√£ th√™m ${addonProduct.name} v√†o gi·ªè h√†ng! üöö B·∫°n ƒë∆∞·ª£c mi·ªÖn ph√≠ ship!`, 'success');
        },

        // Ki·ªÉm tra s·∫£n ph·∫©m b√°n k√®m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
        isAddonInCart(addonId) {
            return this.cart.some(item => item.id === addonId);
        },
        // Ki·ªÉm tra xem freeship c√≥ ph·∫£i t·ª´ m√£ gi·∫£m gi√° kh√¥ng
        isFreeshippingFromDiscount() {
            if (!this.appliedDiscountCode) return false;
            const appliedDiscount = this.availableDiscounts.find(d => d.code === this.appliedDiscountCode);
            return appliedDiscount && appliedDiscount.type === 'shipping';
        },

        removeFromCart(productId) {
            // Ki·ªÉm tra xem s·∫£n ph·∫©m b·ªã x√≥a c√≥ ph·∫£i l√† s·∫£n ph·∫©m b√°n k√®m kh√¥ng
            const isAddonProduct = this.addonProducts.some(addon => addon.id === productId);
            const removedProduct = this.cart.find(item => item.id === productId);

            this.cart = this.cart.filter(item => item.id !== productId);
            // X√≥a kh·ªèi danh s√°ch ƒë√£ ch·ªçn
            this.selectedCartItems = this.selectedCartItems.filter(id => id !== productId);

            // N·∫øu x√≥a s·∫£n ph·∫©m b√°n k√®m, ki·ªÉm tra xem c√≤n s·∫£n ph·∫©m b√°n k√®m n√†o kh√°c kh√¥ng
            if (isAddonProduct) {
                const hasOtherAddons = this.cart.some(item =>
                    this.addonProducts.some(addon => addon.id === item.id)
                );

                // N·∫øu kh√¥ng c√≤n s·∫£n ph·∫©m b√°n k√®m n√†o v√† freeship kh√¥ng ph·∫£i t·ª´ m√£ gi·∫£m gi√°
                if (!hasOtherAddons && !this.isFreeshippingFromDiscount()) {
                    this.showAlert(`ƒê√£ x√≥a ${removedProduct?.name || 's·∫£n ph·∫©m b√°n k√®m'}. Ph√≠ v·∫≠n chuy·ªÉn c√≥ th·ªÉ ƒë∆∞·ª£c √°p d·ª•ng l·∫°i.`, 'info');
                } else {
                    this.showAlert(`ƒê√£ x√≥a ${removedProduct?.name || 's·∫£n ph·∫©m'} kh·ªèi gi·ªè h√†ng.`, 'success');
                }
            } else {
                this.showAlert(`ƒê√£ x√≥a ${removedProduct?.name || 's·∫£n ph·∫©m'} kh·ªèi gi·ªè h√†ng.`, 'success');
            }

            if (this.cart.length === 0) {
                this.resetDiscount();
            }
        },

        increaseQuantity(productId) {
            const item = this.cart.find(item => item.id === productId);
            if (item) {
                item.quantity++;
                this.revalidateAppliedDiscount();
            }
        },

        decreaseQuantity(productId) {
            const item = this.cart.find(item => item.id === productId);
            if (item && item.quantity > 1) {
                item.quantity--;
                this.revalidateAppliedDiscount();
            } else if (item) {
                this.removeFromCart(productId);
            }
        },

        buyNow(product) {
            const existingItem = this.cart.find(item => item.id === product.id);
            if (existingItem) {
                existingItem.quantity++;
            } else {
                const savedNote = this.productNotes[product.id] || '';
                this.cart.push({ ...product, quantity: 1, weight: savedNote });
                this.selectedCartItems.push(product.id);
            }
            this.revalidateAppliedDiscount();
            this.view = 'cart';
            window.scrollTo(0, 0);
        },

        clearCart() {
            this.cart = [];
            this.selectedCartItems = [];
            this.resetDiscount();
        },

        backToShopping() {
            this.view = 'products';
            this.$nextTick(() => {
                const productList = document.getElementById('product-list');
                if (productList) {
                    productList.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            });
        },

        applyDiscount() {
            // L∆∞u tr·∫°ng th√°i freeship t·ª´ s·∫£n ph·∫©m b√°n k√®m tr∆∞·ªõc khi reset
            const hasAddonProducts = this.cart.some(item =>
                this.addonProducts.some(addon => addon.id === item.id)
            );

            this.resetDiscount(); // Reset tr·∫°ng th√°i tr∆∞·ªõc khi √°p d·ª•ng m√£ m·ªõi

            // Kh√¥i ph·ª•c freeship n·∫øu c√≥ s·∫£n ph·∫©m b√°n k√®m
            if (hasAddonProducts) {
                this.freeShipping = true;
            }

            const code = this.discountCode.trim().toUpperCase();

            if (!code) {
                this.discountError = 'Vui l√≤ng nh·∫≠p m√£ khuy·∫øn m√£i.';
                return;
            }

            const discount = this.discounts.find(d => d.code.toUpperCase() === code);

            if (!discount || !discount.active) {
                this.discountError = 'M√£ khuy·∫øn m√£i kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.';
                return;
            }

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu
            if (discount.min_order_value && this.cartSubtotal() < discount.min_order_value) {
                this.discountError = `M√£ n√†y ch·ªâ √°p d·ª•ng cho ƒë∆°n h√†ng t·ª´ ${this.formatCurrency(discount.min_order_value)}.`
                return;
            }

            // √Åp d·ª•ng m√£ gi·∫£m gi√° d·ª±a tr√™n lo·∫°i
            if (discount.type === 'free_shipping') {
                this.freeShipping = true;
            } else if (discount.type === 'fixed_amount') {
                this.discountAmount = discount.value;
                // ƒê·∫£m b·∫£o gi·∫£m gi√° kh√¥ng v∆∞·ª£t qu√° t·ªïng ti·ªÅn h√†ng
                if (this.discountAmount > this.cartSubtotal()) {
                    this.discountAmount = this.cartSubtotal();
                }
            }

            this.appliedDiscountCode = code;
        },

        resetDiscount() {
            this.discountCode = '';
            this.appliedDiscountCode = '';
            this.appliedGift = null;
            this.discountAmount = 0;
            this.discountError = '';
        },

        // --- DISCOUNT MODAL FUNCTIONS ---
        openDiscountModal() {
            this.preventMiniCartCloseOnClickOutside = true;
            this.isDiscountModalOpen = true;
        },

        closeDiscountModal() {
            this.isDiscountModalOpen = false;
            // D√πng timeout ƒë·ªÉ ƒë·∫£m b·∫£o s·ª± ki·ªán click ƒë∆∞·ª£c x·ª≠ l√Ω xong xu√¥i
            // tr∆∞·ªõc khi k√≠ch ho·∫°t l·∫°i vi·ªác ƒë√≥ng mini cart
            setTimeout(() => {
                this.preventMiniCartCloseOnClickOutside = false;
            }, 100);
        },

        selectDiscount(code) {
            this.discountCode = code;
        },

        applySelectedDiscount(andClose = false) {
            const code = this.discountCode.trim().toUpperCase();
            if (!code) {
                this.discountError = 'Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn m·ªôt m√£ khuy·∫øn m√£i.';
                return;
            }

            const promotion = this.availableDiscounts.find(d => d.code.toUpperCase() === code);
            if (!promotion || !promotion.active) {
                this.discountError = 'M√£ khuy·∫øn m√£i kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.';
                return;
            }

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán
            if (this.cartSubtotal() < promotion.minOrder) {
                this.discountError = `∆Øu ƒë√£i n√†y ch·ªâ √°p d·ª•ng cho ƒë∆°n h√†ng t·ª´ ${this.formatCurrency(promotion.minOrder)}.`;
                return;
            }
            if (promotion.minItems && this.totalCartQuantity < promotion.minItems) {
                this.discountError = `∆Øu ƒë√£i n√†y ch·ªâ √°p d·ª•ng cho ƒë∆°n h√†ng c√≥ t·ª´ ${promotion.minItems} s·∫£n ph·∫©m tr·ªü l√™n.`;
                return;
            }

            // Reset t·∫•t c·∫£ khuy·∫øn m√£i tr∆∞·ªõc khi √°p d·ª•ng c√°i m·ªõi
            this.resetDiscount();

            // √Åp d·ª•ng khuy·∫øn m√£i m·ªõi
            if (promotion.type === 'gift') {
                this.appliedGift = { title: promotion.title, value: promotion.value };
            } else {
                // X·ª≠ l√Ω c√°c lo·∫°i m√£ gi·∫£m gi√° kh√°c
                if (promotion.type === 'shipping') {
                    this.freeShipping = true;
                } else if (promotion.type === 'fixed') {
                    this.discountAmount = promotion.value;
                } else if (promotion.type === 'percentage') {
                    this.discountAmount = Math.floor(this.cartSubtotal() * promotion.value / 100);
                }
                this.appliedDiscountCode = code;
            }

            // ƒê·∫£m b·∫£o gi·∫£m gi√° kh√¥ng v∆∞·ª£t qu√° t·ªïng ti·ªÅn h√†ng (ch·ªâ √°p d·ª•ng cho m√£ gi·∫£m gi√°, kh√¥ng ph·∫£i qu√† t·∫∑ng)
            if (this.discountAmount > this.cartSubtotal()) {
                this.discountAmount = this.cartSubtotal();
            }

            this.discountCode = code; // Gi·ªØ m√£ trong input
            if (andClose) {
                this.closeDiscountModal();
            }
        },


        getDiscountAvailability(discount) {
            const subtotal = this.cartSubtotal();
            const quantity = this.totalCartQuantity;

            if (subtotal < discount.minOrder) {
                return {
                    available: false,
                    reason: `C·∫ßn mua th√™m ${this.formatCurrency(discount.minOrder - subtotal)}.`
                };
            }

            if (discount.minItems && quantity < discount.minItems) {
                return {
                    available: false,
                    reason: `C·∫ßn th√™m ${discount.minItems - quantity} s·∫£n ph·∫©m.`
                };
            }

            return { available: true, reason: '' };
        },
        // --- ACTIONS ---
        validateAndShowConfirmModal() {
            // --- VALIDATION ---
            if (this.cart.length === 0) {
                this.showAlert('Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.', 'error');
                return;
            }
            // Validate new address fields instead of the old one
            if (!this.customer.name || !this.customer.phone || !this.selectedProvince || !this.selectedDistrict || !this.selectedWard || !this.streetAddress) {
                this.showAlert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin nh·∫≠n h√†ng.', 'error');
                return;
            }

            // Validate phone number format
            const phoneRegex = /(0[3|5|7|8|9])+([0-9]{8})\b/;
            if (!phoneRegex.test(this.customer.phone)) {
                this.showAlert('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.', 'error');
                return;
            }
            const missingWeight = this.cart.some(item => !item.weight.trim());
            if (missingWeight) {
                this.showAlert('Vui l√≤ng nh·∫≠p c√¢n n·∫∑ng cho t·∫•t c·∫£ c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng.', 'error');
                return;
            }

            // Validate payment method
            if (!this.paymentMethod) {
                this.showAlert('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.', 'error');
                return;
            }

            this.isConfirmModalOpen = true;
        },

        async confirmAndSubmitOrder() {
            this.isSubmitting = true;

            this.updateFullAddress();

            const newOrderId = this.generateOrderId();
            this.lastOrderId = newOrderId;

            const orderDetails = {
                orderId: newOrderId,
                cart: (() => {
                    let orderItems = this.cart.map(item => ({
                        name: item.name,
                        price: this.formatCurrency(item.price),
                        quantity: item.quantity,
                        weight: item.weight
                    }));
                    if (this.appliedGift) {
                        orderItems.push({
                            name: this.appliedGift.title,
                            price: 'Mi·ªÖn ph√≠',
                            quantity: 1,
                            weight: 0
                        });
                    }
                    return orderItems;
                })(),
                customer: {
                    name: this.customer.name,
                    phone: this.customer.phone,
                    address: this.customer.address,
                    notes: this.customer.notes
                },
                orderDate: new Date().toISOString(),
                subtotal: this.formatCurrency(this.cartSubtotal()),
                shipping: this.shippingFee() === 0 ? (this.freeShipping ? 'Mi·ªÖn ph√≠ (FREESHIP)' : 'Mi·ªÖn ph√≠') : this.formatCurrency(this.shippingFee()),
                discount: this.discountAmount > 0 ? `-${this.formatCurrency(this.discountAmount)} (${this.appliedDiscountCode})` : 'Kh√¥ng c√≥',
                total: this.formatCurrency(this.cartTotal()),
                paymentMethod: this.paymentMethod === 'cod' ? 'Thanh to√°n khi nh·∫≠n h√†ng (COD)' : 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng'
            };

            const workerUrl = 'https://hidden-bonus-76d2.yendev96.workers.dev';

            try {
                const response = await fetch(workerUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderDetails)
                });

                if (!response.ok) {
                    const errorResult = await response.json();
                    throw new Error(errorResult.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë∆°n h√†ng.');
                }

                this.isConfirmModalOpen = false;

                if (this.paymentMethod === 'bank_transfer') {
                    this.isBankTransferModalOpen = true;
                } else {
                    this.isSuccessModalOpen = true;
                }

            } catch (error) {
                console.error('L·ªói g·ª≠i ƒë∆°n h√†ng:', error);
                this.showAlert(`L·ªói g·ª≠i ƒë∆°n h√†ng: ${error.message}`, 'error');
            } finally {
                this.isSubmitting = false;
            }
        },

        cleanupAfterOrder() {
            // Ch·ªâ x√≥a gi·ªè h√†ng v√† m√£ gi·∫£m gi√°. Th√¥ng tin kh√°ch h√†ng v√† ƒë·ªãa ch·ªâ ƒë∆∞·ª£c gi·ªØ l·∫°i.
            this.cart = [];
            this.resetDiscount();

            this.view = 'products';
            window.scrollTo(0, 0);
        },

        closeSuccessModal() {
            this.isSuccessModalOpen = false;
            setTimeout(() => this.cleanupAfterOrder(), 250);
        },

        closeBankTransferModal() {
            this.isBankTransferModalOpen = false;
            this.isSuccessModalOpen = true; // Hi·ªÉn th·ªã modal ƒë·∫∑t h√†ng th√†nh c√¥ng
        },

        // --- SOCIAL PROOF LOGIC ---
        startNotificationLoop() {
            const names = [
                'Mai Anh', 'Thu·ª≥ Linh', 'B·∫£o Ng·ªçc', 'Kh√°nh An', 'Minh Ch√¢u', 'Gia H√¢n',
                'Ng·ªçc Di·ªáp', 'Ph∆∞∆°ng Vy', 'Th·∫£o Nguy√™n', 'H√† My', 'T√∫ Anh', 'Qu·ª≥nh Chi',
                'Y·∫øn Nhi', 'Lan H∆∞∆°ng', 'Thanh Tr√∫c', 'Di·ªáu Linh', 'B√≠ch Ph∆∞∆°ng', 'Ho√†i An',
                'T∆∞·ªùng Vy', 'Kim Ng√¢n'
            ];
            const actions = [
                'v·ª´a ƒë·∫∑t mua 1 s·∫£n ph·∫©m', 'v·ª´a ho√†n t·∫•t ƒë∆°n h√†ng', 'v·ª´a mua 2 s·∫£n ph·∫©m',
                'ƒë√£ mua V√≤ng D√¢u T·∫±m H·∫°t G·ªëc', 'ƒë√£ mua V√≤ng Mix B·∫°c Cho B√©'
            ];

            const showRandomNotification = () => {
                const randomName = names[Math.floor(Math.random() * names.length)];
                const randomAction = actions[Math.floor(Math.random() * actions.length)];
                this.notification.message = `${randomName} ${randomAction}`;
                this.notification.visible = true;

                setTimeout(() => {
                    this.notification.visible = false;
                }, 4000); // Hi·ªÉn th·ªã trong 4 gi√¢y
            };

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫ßu ti√™n sau 5 gi√¢y, sau ƒë√≥ l·∫∑p l·∫°i m·ªói 8-15 gi√¢y
            setTimeout(() => {
                showRandomNotification();
                setInterval(showRandomNotification, Math.floor(Math.random() * (15000 - 8000 + 1)) + 8000);
            }, 5000);
        },

        // --- COUNTDOWN LOGIC ---
        startFreeshipCountdown() {
            if (!this.freeshipOfferEndTime || this.freeshipOfferEndTime < Date.now()) {
                // ƒê·∫∑t l·∫°i ƒë·∫øm ng∆∞·ª£c 2 gi·ªù n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë√£ h·∫øt h·∫°n
                this.freeshipOfferEndTime = Date.now() + 2 * 60 * 60 * 1000;
            }

            this.countdownTimer.interval = setInterval(() => {
                const now = Date.now();
                const remaining = this.freeshipOfferEndTime - now;

                if (remaining <= 0) {
                    this.countdownTimer.display = '00 : 00 : 00';
                    // T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i chu k·ª≥ 2 gi·ªù m·ªõi sau khi h·∫øt h·∫°n
                    this.freeshipOfferEndTime = Date.now() + 2 * 60 * 60 * 1000;
                    return;
                }

                const hours = Math.floor((remaining / (1000 * 60 * 60)) % 24);
                const minutes = Math.floor((remaining / 1000 / 60) % 60);
                const seconds = Math.floor((remaining / 1000) % 60);

                this.countdownTimer.display =
                    `${hours.toString().padStart(2, '0')} : ` +
                    `${minutes.toString().padStart(2, '0')} : ` +
                    `${seconds.toString().padStart(2, '0')}`;

            }, 1000);
        },

        // --- QUICK VIEW MODAL LOGIC ---
        openQuickView(product) {
            this.quickViewProduct = product;
            this.isQuickViewOpen = true;
            document.body.style.overflow = 'hidden';
        },

        closeQuickView() {
            this.isQuickViewOpen = false;
            // Ch·ªâ kh√¥i ph·ª•c scroll n·∫øu kh√¥ng c√≤n modal n√†o kh√°c ƒëang m·ªü
            if (!this.isMiniCartOpen) {
                 document.body.style.overflow = 'auto';
            }
            // Delay clearing the product to allow for closing animation
            setTimeout(() => {
                this.quickViewProduct = null;
            }, 300);
        }
    }));
});
